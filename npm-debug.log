0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish', 'goodreads' ]
2 info using npm@2.5.1
3 info using node@v0.12.0
4 verbose publish [ 'goodreads' ]
5 silly cache add args [ 'goodreads', null ]
6 verbose cache add spec goodreads
7 silly cache add parsed spec { raw: 'goodreads',
7 silly cache add   scope: null,
7 silly cache add   name: 'goodreads',
7 silly cache add   rawSpec: '',
7 silly cache add   spec: '*',
7 silly cache add   type: 'range' }
8 verbose addNamed goodreads@*
9 silly addNamed semver.valid null
10 silly addNamed semver.validRange *
11 silly addNameRange { name: 'goodreads', range: '*', hasData: false }
12 silly mapToRegistry name goodreads
13 silly mapToRegistry using default registry
14 silly mapToRegistry registry https://registry.npmjs.org/
15 silly mapToRegistry uri https://registry.npmjs.org/goodreads
16 verbose addNameRange registry:https://registry.npmjs.org/goodreads not in flight; fetching
17 verbose request uri https://registry.npmjs.org/goodreads
18 verbose request no auth needed
19 info attempt registry request try #1 at 11:03:53 PM
20 verbose request using bearer token for auth
21 verbose request id 95ad7380369bd0ed
22 http request GET https://registry.npmjs.org/goodreads
23 http 200 https://registry.npmjs.org/goodreads
24 silly get cb [ 200,
24 silly get   { server: 'nginx/1.10.1',
24 silly get     'content-type': 'application/json',
24 silly get     'last-modified': 'Wed, 09 Nov 2016 13:19:29 GMT',
24 silly get     etag: 'W/"58232261-1e9b"',
24 silly get     'content-encoding': 'gzip',
24 silly get     'cache-control': 'max-age=300',
24 silly get     'transfer-encoding': 'chunked',
24 silly get     'accept-ranges': 'bytes',
24 silly get     date: 'Thu, 01 Dec 2016 07:03:54 GMT',
24 silly get     via: '1.1 varnish',
24 silly get     connection: 'keep-alive',
24 silly get     'x-served-by': 'cache-sjc3127-SJC',
24 silly get     'x-cache': 'MISS',
24 silly get     'x-cache-hits': '0',
24 silly get     'x-timer': 'S1480575834.007552,VS0,VE118',
24 silly get     vary: 'Accept-Encoding' } ]
25 verbose get saving goodreads to /Users/bdickason/.npm/registry.npmjs.org/goodreads/.cache.json
26 silly addNameRange number 2 { name: 'goodreads', range: '*', hasData: true }
27 silly addNameRange versions [ 'goodreads', [ '0.0.1', '0.0.2', '0.0.3', '0.0.4' ] ]
28 verbose addNamed goodreads@0.0.4
29 silly addNamed semver.valid 0.0.4
30 silly addNamed semver.validRange 0.0.4
31 silly cache afterAdd goodreads@0.0.4
32 verbose afterAdd /Users/bdickason/.npm/goodreads/0.0.4/package/package.json not in flight; writing
33 verbose afterAdd /Users/bdickason/.npm/goodreads/0.0.4/package/package.json written
34 silly publish { name: 'goodreads',
34 silly publish   description: 'Wrapper for the Goodreads API',
34 silly publish   version: '0.0.4',
34 silly publish   author:
34 silly publish    { name: 'Brad Dickason',
34 silly publish      email: 'dickason@gmail.com',
34 silly publish      url: 'http://braddickason.com' },
34 silly publish   repository:
34 silly publish    { type: 'git',
34 silly publish      url: 'https://github.com/bdickason/node-goodreads' },
34 silly publish   keywords: [ 'goodreads', 'books', 'lists' ],
34 silly publish   dependencies:
34 silly publish    { xml2js: '>= 0.1.9',
34 silly publish      oauth: '>= 0.9.2',
34 silly publish      'coffee-script': '>= 0.0.1' },
34 silly publish   directories: { lib: './lib/goodreads', example: './examples' },
34 silly publish   main: '.index.js',
34 silly publish   engines: { node: '>= 0.2.0' },
34 silly publish   readme: 'Goodreads - Use NodeJS to tap into the Goodreads API\n-----\n\nThis is a dead simple wrapper for the Goodreads API when using NodeJS. I\'ve only exposed a few GR API functions so far but would be happy to entertain adding more if there\'s demand.\n\n* Goodreads API: http://goodreads.com/api\n* Github: https://github.com/bdickason/node-goodreads\n* Twitter: [@bdickason](http://twitter.com/bdickason)\n* E-mail: dickason@gmail.com\n\nInstallation\n======\n1. Install npm: `curl http://npmjs.org/install.sh | sh`\n2. Grab this module from npm: `npm install goodreads`\n3. Include it in your program:\n * Coffeescript: `goodreads = require \'goodreads\'`\n * Javascript: `goodreads = require(\'goodreads\');`\n4. create a new instance of the Goodreads client:\n * Coffeescript: `gr = new goodreads.client { \'key\': key, \'secret\': secret }`\n * Javascript: `gr = new goodreads.client({ \'key\': key, \'secret\': secret });`\n5. Go get a goodreads developer key/secret from http://www.goodreads.com/api/keys\n6. _(optional)_ Add your key/secret to your environment variables so Nodejs can access them\n * Key: `export GOODREADS_KEY=yourkey`\n * Secret: `export GOODREADS_SECRET=yoursecret`\n7. Try it out! Maybe do a `node examples/booklist.js` to get an idea how things work\n\nFunctions\n=====\n**getShelves** - Get all shelves for a given user\n* Input: userId\n* Output: json (as callback)\n* Example: `getShelves \'4085451\', (json) ->`\n  \n**getSingleShelf** - Get a specific list by ID\n* Input: shelfOptions object with userID (required), shelf (required), page (optional), and per_page (optional) properties.\n* Output: json (as callback)\n* Example: `getSingleShelf {\'userID\': \'4085451\', \'shelf\': \'web\', \'page\': 1, \'per_page\': 200}, (json) ->`\n\n**requestToken** - OAUTH: calls back an object with oauthToken, oauthTokenSecret, and the URL!\n* Input: none\n* Output: json `{ oauthToken: \'iu1iojij14141411414\', oauthTokenSecret: \'j1kljklsajdklf132141\', url: \'http://goodreads.com/blah\'}`\n* Example: `requestToken (callback) ->`\n\n**processCallback** - expects: oauthToken, oauthTokenSecret, authorize (from the query string)\n_Note: call this after requestToken!_\n* Input: oauthToken, oauthTokenSecret, authorize\n* Output: json `{ \'username\': \'Brad Dickason\', \'userid\': \'404168\', \'success\': 1, \'accessToken\': \'04ajdfkja\', \'accessTokenSecret\': \'i14k31j41jkm\' }`\n* Example: `processCallback oauthToken, oauthTokenSecret, params.query.authorize, (callback) ->`\n  \n\n_More to come!_\n\n\nHelp, I need an adult!\n======\nFirst step: Check out the `/examples` folder. It\'s decently documented.\n\nIf you\'re still having issues, you can submit them here: https://github.com/bdickason/node-goodreads/issues\n\n\nChangelog\n======\n**v0.0.2** - Removed OAuth workarounds\n* OAuth Callback (`processCallback`) now properly returns an Access Token (`accessToken`) and Access Token Secret (`accessTokenSecret`)\n\n**v0.0.1** - First release! Woohoo!!\n* Added support getting a list of a user\'s shelves (`getShelves`)\n* Added support for getting all books on a single shelf (`getSingleShelf`)\n* Added support for an OAuth round trip via `requestToken` and `processCallback`\n* Started this ugly manual\n',
34 silly publish   readmeFilename: 'README.md',
34 silly publish   gitHead: '1900dce257b2dc9d82e31cfa9c657e6d5917bf29',
34 silly publish   bugs: { url: 'https://github.com/bdickason/node-goodreads/issues' },
34 silly publish   homepage: 'https://github.com/bdickason/node-goodreads',
34 silly publish   _id: 'goodreads@0.0.4',
34 silly publish   scripts: {},
34 silly publish   _shasum: 'db1d94e716fe19e1e97a3aa4ec50c3e3ed129e39',
34 silly publish   _from: 'goodreads@*' }
35 info prepublish goodreads@0.0.4
36 silly mapToRegistry name goodreads
37 silly mapToRegistry using default registry
38 silly mapToRegistry registry https://registry.npmjs.org/
39 silly mapToRegistry uri https://registry.npmjs.org/goodreads
40 verbose publish registryBase https://registry.npmjs.org/
41 silly publish uploading /Users/bdickason/.npm/goodreads/0.0.4/package.tgz
42 verbose request uri https://registry.npmjs.org/goodreads
43 verbose request sending authorization for write operation
44 info attempt registry request try #1 at 11:03:54 PM
45 verbose request using bearer token for auth
46 http request PUT https://registry.npmjs.org/goodreads
47 http 403 https://registry.npmjs.org/goodreads
48 verbose headers { 'content-type': 'application/json',
48 verbose headers   'cache-control': 'max-age=300',
48 verbose headers   'content-length': '95',
48 verbose headers   'accept-ranges': 'bytes',
48 verbose headers   date: 'Thu, 01 Dec 2016 07:03:54 GMT',
48 verbose headers   via: '1.1 varnish',
48 verbose headers   connection: 'keep-alive',
48 verbose headers   'x-served-by': 'cache-sjc3647-SJC',
48 verbose headers   'x-cache': 'MISS',
48 verbose headers   'x-cache-hits': '0',
48 verbose headers   'x-timer': 'S1480575834.312893,VS0,VE182',
48 verbose headers   vary: 'Accept-Encoding' }
49 verbose request invalidating /Users/bdickason/.npm/registry.npmjs.org/goodreads on PUT
50 error publish Failed PUT 403
51 verbose stack Error: "You cannot publish over the previously published version 0.0.4." : goodreads
51 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:254:14)
51 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:178:14)
51 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:344:22)
51 verbose stack     at Request.emit (events.js:110:17)
51 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1239:14)
51 verbose stack     at Request.emit (events.js:129:20)
51 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1187:12)
51 verbose stack     at IncomingMessage.emit (events.js:129:20)
51 verbose stack     at _stream_readable.js:908:16
51 verbose stack     at process._tickCallback (node.js:355:11)
52 verbose statusCode 403
53 verbose pkgid goodreads
54 verbose cwd /Users/bdickason/code/node-goodreads
55 error Darwin 16.1.0
56 error argv "node" "/usr/local/bin/npm" "publish" "goodreads"
57 error node v0.12.0
58 error npm  v2.5.1
59 error code E403
60 error "You cannot publish over the previously published version 0.0.4." : goodreads
61 error If you need help, you may report this error at:
61 error     <http://github.com/npm/npm/issues>
62 verbose exit [ 1, true ]
